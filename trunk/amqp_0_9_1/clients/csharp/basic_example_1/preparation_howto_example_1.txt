Some 'by the way' notes collected during the initial hacking of the c# client and thrift adaptation from our xml schema via xsd2thrift :) 

A more comprehensive set of notes will be developed if need be :)

Our contests4.xsd contains some reserved keywords (namely delete, when and break). So--having made a full backup of the original file of course--we can rename the said reserved keywords via similar to the following commands (if cygwin is installed on Windows or if using reasonable *BSD/Linux/OSX distro):

sed -i s/delete/Delete/g contests4.xsd
sed -i s/when/When/g contests4.xsd
sed -i s/break/Break/g contests4.xsd

Next we can run the conversion of appropriated .xsd file to the native thrift format:

java -jar xsd2thrift-1.0-onejar.jar --thrift --package=ConsoleApplication1 ./contests4.xsd > contests4.thrift

The package in the above, of course, could well be better named than ConsoleApplication1 :) :) :)

And finally we generate language-specific bindings (in this case for c#):

thrift-0.9.2.exe --gen csharp ./contests4.thrift

In the above, thrift compiler generates one potentially illegal syntax -- namely it creates variable called 'object' (lowercase) which is not allowed (at least on the C# development tools I've tried, which included VisStudio Express), so editing the UnspecifiedType.cs to the following (i.e. appending underscore to 'object') should solve the issue:

public UnspecifiedType(string baseObjectType, byte[] object_) : this() {
      this.BaseObjectType = baseObjectType;
      this.Object = object_;
}

All of the above has already been done and resulting *.cs files place in the "common" folder in the basic_example_1 VisStudio solution. 

If using VisStudio, the ideal way is to "add link" to the project of all of the generate files (*.cs generated by thrift compiler -- example solution should already have it included, unless it is unable to realise relative paths which means re-adding the whole lot :) 

When compiling one needs to add reference-paths to Rabbit-MQ and Thrift csharp libraries (copies are included in the development_tools in our shared drive); whilst also "Add reference" in the project, select "extensions" and then tick/select Thrift and RabbitMQ stuff.
	 
